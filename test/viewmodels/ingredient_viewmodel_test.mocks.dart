// Mocks generated by Mockito 5.4.6 from annotations
// in snapchef/test/viewmodels/ingredient_viewmodel_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:drift/drift.dart' as _i7;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i4;
import 'package:snapchef/database/app_database.dart' as _i2;
import 'package:snapchef/database/daos/ingredient_dao.dart' as _i6;
import 'package:snapchef/services/ingredient_service.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _Fake$IngredientsTable_0 extends _i1.SmartFake
    implements _i2.$IngredientsTable {
  _Fake$IngredientsTable_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [IngredientService].
///
/// See the documentation for Mockito's code generation for more information.
class MockIngredientService extends _i1.Mock implements _i3.IngredientService {
  @override
  String get baseUrl => (super.noSuchMethod(
        Invocation.getter(#baseUrl),
        returnValue: _i4.dummyValue<String>(
          this,
          Invocation.getter(#baseUrl),
        ),
        returnValueForMissingStub: _i4.dummyValue<String>(
          this,
          Invocation.getter(#baseUrl),
        ),
      ) as String);

  @override
  _i5.Future<List<dynamic>> getAllIngredients() => (super.noSuchMethod(
        Invocation.method(
          #getAllIngredients,
          [],
        ),
        returnValue: _i5.Future<List<dynamic>>.value(<dynamic>[]),
        returnValueForMissingStub: _i5.Future<List<dynamic>>.value(<dynamic>[]),
      ) as _i5.Future<List<dynamic>>);

  @override
  _i5.Future<List<dynamic>> searchIngredients({
    String? name,
    String? category,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #searchIngredients,
          [],
          {
            #name: name,
            #category: category,
          },
        ),
        returnValue: _i5.Future<List<dynamic>>.value(<dynamic>[]),
        returnValueForMissingStub: _i5.Future<List<dynamic>>.value(<dynamic>[]),
      ) as _i5.Future<List<dynamic>>);

  @override
  _i5.Future<Map<String, dynamic>> getIngredientById(String? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #getIngredientById,
          [id],
        ),
        returnValue:
            _i5.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
        returnValueForMissingStub:
            _i5.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i5.Future<Map<String, dynamic>>);
}

/// A class which mocks [IngredientDao].
///
/// See the documentation for Mockito's code generation for more information.
class MockIngredientDao extends _i1.Mock implements _i6.IngredientDao {
  @override
  _i2.$IngredientsTable get ingredients => (super.noSuchMethod(
        Invocation.getter(#ingredients),
        returnValue: _Fake$IngredientsTable_0(
          this,
          Invocation.getter(#ingredients),
        ),
        returnValueForMissingStub: _Fake$IngredientsTable_0(
          this,
          Invocation.getter(#ingredients),
        ),
      ) as _i2.$IngredientsTable);

  @override
  _i5.Future<List<_i2.Ingredient>> getAllIngredients() => (super.noSuchMethod(
        Invocation.method(
          #getAllIngredients,
          [],
        ),
        returnValue: _i5.Future<List<_i2.Ingredient>>.value(<_i2.Ingredient>[]),
        returnValueForMissingStub:
            _i5.Future<List<_i2.Ingredient>>.value(<_i2.Ingredient>[]),
      ) as _i5.Future<List<_i2.Ingredient>>);

  @override
  _i5.Stream<List<_i2.Ingredient>> watchAllIngredients() => (super.noSuchMethod(
        Invocation.method(
          #watchAllIngredients,
          [],
        ),
        returnValue: _i5.Stream<List<_i2.Ingredient>>.empty(),
        returnValueForMissingStub: _i5.Stream<List<_i2.Ingredient>>.empty(),
      ) as _i5.Stream<List<_i2.Ingredient>>);

  @override
  _i5.Future<_i2.Ingredient?> getIngredientById(String? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #getIngredientById,
          [id],
        ),
        returnValue: _i5.Future<_i2.Ingredient?>.value(),
        returnValueForMissingStub: _i5.Future<_i2.Ingredient?>.value(),
      ) as _i5.Future<_i2.Ingredient?>);

  @override
  _i5.Future<int> insertIngredient(
          _i7.Insertable<_i2.Ingredient>? ingredient) =>
      (super.noSuchMethod(
        Invocation.method(
          #insertIngredient,
          [ingredient],
        ),
        returnValue: _i5.Future<int>.value(0),
        returnValueForMissingStub: _i5.Future<int>.value(0),
      ) as _i5.Future<int>);

  @override
  _i5.Future<int> deleteIngredient(String? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteIngredient,
          [id],
        ),
        returnValue: _i5.Future<int>.value(0),
        returnValueForMissingStub: _i5.Future<int>.value(0),
      ) as _i5.Future<int>);
}
