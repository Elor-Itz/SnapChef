// Mocks generated by Mockito 5.4.6 from annotations
// in snapchef/test/viewmodels/notifications_viewmodel_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i11;
import 'dart:ui' as _i14;

import 'package:flutter/material.dart' as _i16;
import 'package:flutter/services.dart' as _i15;
import 'package:flutter_local_notifications/flutter_local_notifications.dart'
    as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i12;
import 'package:snapchef/models/notifications/app_notification.dart' as _i3;
import 'package:snapchef/providers/connectivity_provider.dart' as _i9;
import 'package:snapchef/providers/sync_actions/cookbook_sync_actions.dart'
    as _i6;
import 'package:snapchef/providers/sync_actions/fridge_sync_actions.dart'
    as _i4;
import 'package:snapchef/providers/sync_actions/grocery_sync_actions.dart'
    as _i5;
import 'package:snapchef/providers/sync_actions/notification_sync_actions.dart'
    as _i8;
import 'package:snapchef/providers/sync_actions/shared_recipe_sync_actions.dart'
    as _i7;
import 'package:snapchef/providers/sync_provider.dart' as _i17;
import 'package:snapchef/services/backend_notification_service.dart' as _i13;
import 'package:snapchef/services/notification_service.dart' as _i10;
import 'package:snapchef/services/sync_service.dart' as _i18;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeFlutterLocalNotificationsPlugin_0 extends _i1.SmartFake
    implements _i2.FlutterLocalNotificationsPlugin {
  _FakeFlutterLocalNotificationsPlugin_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeNotificationDetails_1 extends _i1.SmartFake
    implements _i2.NotificationDetails {
  _FakeNotificationDetails_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAppNotification_2 extends _i1.SmartFake
    implements _i3.AppNotification {
  _FakeAppNotification_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFridgeSyncActions_3 extends _i1.SmartFake
    implements _i4.FridgeSyncActions {
  _FakeFridgeSyncActions_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGrocerySyncActions_4 extends _i1.SmartFake
    implements _i5.GrocerySyncActions {
  _FakeGrocerySyncActions_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeCookbookSyncActions_5 extends _i1.SmartFake
    implements _i6.CookbookSyncActions {
  _FakeCookbookSyncActions_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSharedRecipeSyncActions_6 extends _i1.SmartFake
    implements _i7.SharedRecipeSyncActions {
  _FakeSharedRecipeSyncActions_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeNotificationSyncActions_7 extends _i1.SmartFake
    implements _i8.NotificationSyncActions {
  _FakeNotificationSyncActions_7(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeConnectivityProvider_8 extends _i1.SmartFake
    implements _i9.ConnectivityProvider {
  _FakeConnectivityProvider_8(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [NotificationService].
///
/// See the documentation for Mockito's code generation for more information.
class MockNotificationService extends _i1.Mock
    implements _i10.NotificationService {
  @override
  _i2.FlutterLocalNotificationsPlugin get notificationsPlugin =>
      (super.noSuchMethod(
        Invocation.getter(#notificationsPlugin),
        returnValue: _FakeFlutterLocalNotificationsPlugin_0(
          this,
          Invocation.getter(#notificationsPlugin),
        ),
        returnValueForMissingStub: _FakeFlutterLocalNotificationsPlugin_0(
          this,
          Invocation.getter(#notificationsPlugin),
        ),
      ) as _i2.FlutterLocalNotificationsPlugin);

  @override
  _i11.Future<List<_i3.AppNotification>> getStoredNotifications() =>
      (super.noSuchMethod(
        Invocation.method(
          #getStoredNotifications,
          [],
        ),
        returnValue: _i11.Future<List<_i3.AppNotification>>.value(
            <_i3.AppNotification>[]),
        returnValueForMissingStub: _i11.Future<List<_i3.AppNotification>>.value(
            <_i3.AppNotification>[]),
      ) as _i11.Future<List<_i3.AppNotification>>);

  @override
  _i11.Future<void> initNotification() => (super.noSuchMethod(
        Invocation.method(
          #initNotification,
          [],
        ),
        returnValue: _i11.Future<void>.value(),
        returnValueForMissingStub: _i11.Future<void>.value(),
      ) as _i11.Future<void>);

  @override
  _i2.NotificationDetails notificationDetails() => (super.noSuchMethod(
        Invocation.method(
          #notificationDetails,
          [],
        ),
        returnValue: _FakeNotificationDetails_1(
          this,
          Invocation.method(
            #notificationDetails,
            [],
          ),
        ),
        returnValueForMissingStub: _FakeNotificationDetails_1(
          this,
          Invocation.method(
            #notificationDetails,
            [],
          ),
        ),
      ) as _i2.NotificationDetails);

  @override
  _i11.Future<void> showNotification(
    String? title,
    String? body,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #showNotification,
          [
            title,
            body,
          ],
        ),
        returnValue: _i11.Future<void>.value(),
        returnValueForMissingStub: _i11.Future<void>.value(),
      ) as _i11.Future<void>);

  @override
  _i11.Future<void> saveStoredNotifications(
          List<_i3.AppNotification>? notifications) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveStoredNotifications,
          [notifications],
        ),
        returnValue: _i11.Future<void>.value(),
        returnValueForMissingStub: _i11.Future<void>.value(),
      ) as _i11.Future<void>);

  @override
  _i11.Future<String> generateUniqueNotificationId() => (super.noSuchMethod(
        Invocation.method(
          #generateUniqueNotificationId,
          [],
        ),
        returnValue: _i11.Future<String>.value(_i12.dummyValue<String>(
          this,
          Invocation.method(
            #generateUniqueNotificationId,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i11.Future<String>.value(_i12.dummyValue<String>(
          this,
          Invocation.method(
            #generateUniqueNotificationId,
            [],
          ),
        )),
      ) as _i11.Future<String>);

  @override
  _i11.Future<void> scheduleNotification(
    _i3.AppNotification? notification, {
    String? customTitle,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #scheduleNotification,
          [notification],
          {#customTitle: customTitle},
        ),
        returnValue: _i11.Future<void>.value(),
        returnValueForMissingStub: _i11.Future<void>.value(),
      ) as _i11.Future<void>);

  @override
  _i11.Future<void> editNotification(
    String? id,
    _i3.AppNotification? updatedNotification,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #editNotification,
          [
            id,
            updatedNotification,
          ],
        ),
        returnValue: _i11.Future<void>.value(),
        returnValueForMissingStub: _i11.Future<void>.value(),
      ) as _i11.Future<void>);

  @override
  _i11.Future<void> removeNotification(String? id) => (super.noSuchMethod(
        Invocation.method(
          #removeNotification,
          [id],
        ),
        returnValue: _i11.Future<void>.value(),
        returnValueForMissingStub: _i11.Future<void>.value(),
      ) as _i11.Future<void>);

  @override
  _i11.Future<List<_i3.AppNotification>> getScheduledNotifications(
          {Type? type}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getScheduledNotifications,
          [],
          {#type: type},
        ),
        returnValue: _i11.Future<List<_i3.AppNotification>>.value(
            <_i3.AppNotification>[]),
        returnValueForMissingStub: _i11.Future<List<_i3.AppNotification>>.value(
            <_i3.AppNotification>[]),
      ) as _i11.Future<List<_i3.AppNotification>>);
}

/// A class which mocks [BackendNotificationService].
///
/// See the documentation for Mockito's code generation for more information.
class MockBackendNotificationService extends _i1.Mock
    implements _i13.BackendNotificationService {
  @override
  String get baseUrl => (super.noSuchMethod(
        Invocation.getter(#baseUrl),
        returnValue: _i12.dummyValue<String>(
          this,
          Invocation.getter(#baseUrl),
        ),
        returnValueForMissingStub: _i12.dummyValue<String>(
          this,
          Invocation.getter(#baseUrl),
        ),
      ) as String);

  @override
  _i11.Stream<_i3.AppNotification> get notificationStream =>
      (super.noSuchMethod(
        Invocation.getter(#notificationStream),
        returnValue: _i11.Stream<_i3.AppNotification>.empty(),
        returnValueForMissingStub: _i11.Stream<_i3.AppNotification>.empty(),
      ) as _i11.Stream<_i3.AppNotification>);

  @override
  _i11.Future<List<_i3.AppNotification>> fetchNotifications() =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchNotifications,
          [],
        ),
        returnValue: _i11.Future<List<_i3.AppNotification>>.value(
            <_i3.AppNotification>[]),
        returnValueForMissingStub: _i11.Future<List<_i3.AppNotification>>.value(
            <_i3.AppNotification>[]),
      ) as _i11.Future<List<_i3.AppNotification>>);

  @override
  _i11.Future<_i3.AppNotification> createNotification(
          _i3.AppNotification? notification) =>
      (super.noSuchMethod(
        Invocation.method(
          #createNotification,
          [notification],
        ),
        returnValue:
            _i11.Future<_i3.AppNotification>.value(_FakeAppNotification_2(
          this,
          Invocation.method(
            #createNotification,
            [notification],
          ),
        )),
        returnValueForMissingStub:
            _i11.Future<_i3.AppNotification>.value(_FakeAppNotification_2(
          this,
          Invocation.method(
            #createNotification,
            [notification],
          ),
        )),
      ) as _i11.Future<_i3.AppNotification>);

  @override
  _i11.Future<_i3.AppNotification> updateNotification(
    String? id,
    _i3.AppNotification? notification,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateNotification,
          [
            id,
            notification,
          ],
        ),
        returnValue:
            _i11.Future<_i3.AppNotification>.value(_FakeAppNotification_2(
          this,
          Invocation.method(
            #updateNotification,
            [
              id,
              notification,
            ],
          ),
        )),
        returnValueForMissingStub:
            _i11.Future<_i3.AppNotification>.value(_FakeAppNotification_2(
          this,
          Invocation.method(
            #updateNotification,
            [
              id,
              notification,
            ],
          ),
        )),
      ) as _i11.Future<_i3.AppNotification>);

  @override
  _i11.Future<void> deleteNotification(String? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteNotification,
          [id],
        ),
        returnValue: _i11.Future<void>.value(),
        returnValueForMissingStub: _i11.Future<void>.value(),
      ) as _i11.Future<void>);
}

/// A class which mocks [ConnectivityProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockConnectivityProvider extends _i1.Mock
    implements _i9.ConnectivityProvider {
  @override
  bool get isOffline => (super.noSuchMethod(
        Invocation.getter(#isOffline),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void didChangeAppLifecycleState(_i14.AppLifecycleState? state) =>
      super.noSuchMethod(
        Invocation.method(
          #didChangeAppLifecycleState,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i11.Future<void> checkInternetAndServer() => (super.noSuchMethod(
        Invocation.method(
          #checkInternetAndServer,
          [],
        ),
        returnValue: _i11.Future<void>.value(),
        returnValueForMissingStub: _i11.Future<void>.value(),
      ) as _i11.Future<void>);

  @override
  void addListener(_i14.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i14.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i11.Future<bool> didPopRoute() => (super.noSuchMethod(
        Invocation.method(
          #didPopRoute,
          [],
        ),
        returnValue: _i11.Future<bool>.value(false),
        returnValueForMissingStub: _i11.Future<bool>.value(false),
      ) as _i11.Future<bool>);

  @override
  bool handleStartBackGesture(_i15.PredictiveBackEvent? backEvent) =>
      (super.noSuchMethod(
        Invocation.method(
          #handleStartBackGesture,
          [backEvent],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  void handleUpdateBackGestureProgress(_i15.PredictiveBackEvent? backEvent) =>
      super.noSuchMethod(
        Invocation.method(
          #handleUpdateBackGestureProgress,
          [backEvent],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void handleCommitBackGesture() => super.noSuchMethod(
        Invocation.method(
          #handleCommitBackGesture,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void handleCancelBackGesture() => super.noSuchMethod(
        Invocation.method(
          #handleCancelBackGesture,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i11.Future<bool> didPushRoute(String? route) => (super.noSuchMethod(
        Invocation.method(
          #didPushRoute,
          [route],
        ),
        returnValue: _i11.Future<bool>.value(false),
        returnValueForMissingStub: _i11.Future<bool>.value(false),
      ) as _i11.Future<bool>);

  @override
  _i11.Future<bool> didPushRouteInformation(
          _i16.RouteInformation? routeInformation) =>
      (super.noSuchMethod(
        Invocation.method(
          #didPushRouteInformation,
          [routeInformation],
        ),
        returnValue: _i11.Future<bool>.value(false),
        returnValueForMissingStub: _i11.Future<bool>.value(false),
      ) as _i11.Future<bool>);

  @override
  void didChangeMetrics() => super.noSuchMethod(
        Invocation.method(
          #didChangeMetrics,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void didChangeTextScaleFactor() => super.noSuchMethod(
        Invocation.method(
          #didChangeTextScaleFactor,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void didChangePlatformBrightness() => super.noSuchMethod(
        Invocation.method(
          #didChangePlatformBrightness,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void didChangeLocales(List<_i14.Locale>? locales) => super.noSuchMethod(
        Invocation.method(
          #didChangeLocales,
          [locales],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void didChangeViewFocus(_i14.ViewFocusEvent? event) => super.noSuchMethod(
        Invocation.method(
          #didChangeViewFocus,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i11.Future<_i14.AppExitResponse> didRequestAppExit() => (super.noSuchMethod(
        Invocation.method(
          #didRequestAppExit,
          [],
        ),
        returnValue:
            _i11.Future<_i14.AppExitResponse>.value(_i14.AppExitResponse.exit),
        returnValueForMissingStub:
            _i11.Future<_i14.AppExitResponse>.value(_i14.AppExitResponse.exit),
      ) as _i11.Future<_i14.AppExitResponse>);

  @override
  void didHaveMemoryPressure() => super.noSuchMethod(
        Invocation.method(
          #didHaveMemoryPressure,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void didChangeAccessibilityFeatures() => super.noSuchMethod(
        Invocation.method(
          #didChangeAccessibilityFeatures,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [SyncProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockSyncProvider extends _i1.Mock implements _i17.SyncProvider {
  @override
  Map<String, List<Map<String, dynamic>>> get pendingActionQueues =>
      (super.noSuchMethod(
        Invocation.getter(#pendingActionQueues),
        returnValue: <String, List<Map<String, dynamic>>>{},
        returnValueForMissingStub: <String, List<Map<String, dynamic>>>{},
      ) as Map<String, List<Map<String, dynamic>>>);

  @override
  _i4.FridgeSyncActions get fridgeSyncActions => (super.noSuchMethod(
        Invocation.getter(#fridgeSyncActions),
        returnValue: _FakeFridgeSyncActions_3(
          this,
          Invocation.getter(#fridgeSyncActions),
        ),
        returnValueForMissingStub: _FakeFridgeSyncActions_3(
          this,
          Invocation.getter(#fridgeSyncActions),
        ),
      ) as _i4.FridgeSyncActions);

  @override
  _i5.GrocerySyncActions get grocerySyncActions => (super.noSuchMethod(
        Invocation.getter(#grocerySyncActions),
        returnValue: _FakeGrocerySyncActions_4(
          this,
          Invocation.getter(#grocerySyncActions),
        ),
        returnValueForMissingStub: _FakeGrocerySyncActions_4(
          this,
          Invocation.getter(#grocerySyncActions),
        ),
      ) as _i5.GrocerySyncActions);

  @override
  _i6.CookbookSyncActions get cookbookSyncActions => (super.noSuchMethod(
        Invocation.getter(#cookbookSyncActions),
        returnValue: _FakeCookbookSyncActions_5(
          this,
          Invocation.getter(#cookbookSyncActions),
        ),
        returnValueForMissingStub: _FakeCookbookSyncActions_5(
          this,
          Invocation.getter(#cookbookSyncActions),
        ),
      ) as _i6.CookbookSyncActions);

  @override
  _i7.SharedRecipeSyncActions get sharedRecipeSyncActions =>
      (super.noSuchMethod(
        Invocation.getter(#sharedRecipeSyncActions),
        returnValue: _FakeSharedRecipeSyncActions_6(
          this,
          Invocation.getter(#sharedRecipeSyncActions),
        ),
        returnValueForMissingStub: _FakeSharedRecipeSyncActions_6(
          this,
          Invocation.getter(#sharedRecipeSyncActions),
        ),
      ) as _i7.SharedRecipeSyncActions);

  @override
  _i8.NotificationSyncActions get notificationSyncActions =>
      (super.noSuchMethod(
        Invocation.getter(#notificationSyncActions),
        returnValue: _FakeNotificationSyncActions_7(
          this,
          Invocation.getter(#notificationSyncActions),
        ),
        returnValueForMissingStub: _FakeNotificationSyncActions_7(
          this,
          Invocation.getter(#notificationSyncActions),
        ),
      ) as _i8.NotificationSyncActions);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  void initSync(_i9.ConnectivityProvider? connectivityProvider) =>
      super.noSuchMethod(
        Invocation.method(
          #initSync,
          [connectivityProvider],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void disposeSync() => super.noSuchMethod(
        Invocation.method(
          #disposeSync,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i11.Future<List<Map<String, dynamic>>> getPendingActions(String? queue) =>
      (super.noSuchMethod(
        Invocation.method(
          #getPendingActions,
          [queue],
        ),
        returnValue: _i11.Future<List<Map<String, dynamic>>>.value(
            <Map<String, dynamic>>[]),
        returnValueForMissingStub:
            _i11.Future<List<Map<String, dynamic>>>.value(
                <Map<String, dynamic>>[]),
      ) as _i11.Future<List<Map<String, dynamic>>>);

  @override
  void addPendingAction(
    String? queue,
    Map<String, dynamic>? action,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #addPendingAction,
          [
            queue,
            action,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void clearSyncQueue() => super.noSuchMethod(
        Invocation.method(
          #clearSyncQueue,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i11.Future<void> handleSyncAction(
    String? queue,
    Map<String, dynamic>? action,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #handleSyncAction,
          [
            queue,
            action,
          ],
        ),
        returnValue: _i11.Future<void>.value(),
        returnValueForMissingStub: _i11.Future<void>.value(),
      ) as _i11.Future<void>);

  @override
  _i11.Future<void> syncPendingActions() => (super.noSuchMethod(
        Invocation.method(
          #syncPendingActions,
          [],
        ),
        returnValue: _i11.Future<void>.value(),
        returnValueForMissingStub: _i11.Future<void>.value(),
      ) as _i11.Future<void>);

  @override
  _i11.Future<void> savePendingActions() => (super.noSuchMethod(
        Invocation.method(
          #savePendingActions,
          [],
        ),
        returnValue: _i11.Future<void>.value(),
        returnValueForMissingStub: _i11.Future<void>.value(),
      ) as _i11.Future<void>);

  @override
  _i11.Future<void> loadPendingActions() => (super.noSuchMethod(
        Invocation.method(
          #loadPendingActions,
          [],
        ),
        returnValue: _i11.Future<void>.value(),
        returnValueForMissingStub: _i11.Future<void>.value(),
      ) as _i11.Future<void>);

  @override
  void addListener(_i14.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i14.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [SyncManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockSyncManager extends _i1.Mock implements _i18.SyncManager {
  @override
  _i9.ConnectivityProvider get connectivityProvider => (super.noSuchMethod(
        Invocation.getter(#connectivityProvider),
        returnValue: _FakeConnectivityProvider_8(
          this,
          Invocation.getter(#connectivityProvider),
        ),
        returnValueForMissingStub: _FakeConnectivityProvider_8(
          this,
          Invocation.getter(#connectivityProvider),
        ),
      ) as _i9.ConnectivityProvider);

  @override
  void register(_i18.SyncCallback? callback) => super.noSuchMethod(
        Invocation.method(
          #register,
          [callback],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void unregister(_i18.SyncCallback? callback) => super.noSuchMethod(
        Invocation.method(
          #unregister,
          [callback],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i11.Future<void> triggerSyncIfOnline() => (super.noSuchMethod(
        Invocation.method(
          #triggerSyncIfOnline,
          [],
        ),
        returnValue: _i11.Future<void>.value(),
        returnValueForMissingStub: _i11.Future<void>.value(),
      ) as _i11.Future<void>);

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
