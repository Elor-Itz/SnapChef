// Mocks generated by Mockito 5.4.6 from annotations
// in snapchef/test/viewmodels/friend_viewmodel_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i8;
import 'dart:io' as _i12;
import 'dart:ui' as _i14;

import 'package:flutter/material.dart' as _i13;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i7;
import 'package:snapchef/database/app_database.dart' as _i2;
import 'package:snapchef/models/friend_request.dart' as _i10;
import 'package:snapchef/models/user.dart' as _i9;
import 'package:snapchef/providers/connectivity_provider.dart' as _i3;
import 'package:snapchef/repositories/user_repository.dart' as _i5;
import 'package:snapchef/services/friend_service.dart' as _i6;
import 'package:snapchef/services/socket_service.dart' as _i4;
import 'package:snapchef/viewmodels/user_viewmodel.dart' as _i11;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeAppDatabase_0 extends _i1.SmartFake implements _i2.AppDatabase {
  _FakeAppDatabase_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeConnectivityProvider_1 extends _i1.SmartFake
    implements _i3.ConnectivityProvider {
  _FakeConnectivityProvider_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSocketService_2 extends _i1.SmartFake implements _i4.SocketService {
  _FakeSocketService_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUserRepository_3 extends _i1.SmartFake
    implements _i5.UserRepository {
  _FakeUserRepository_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFriendService_4 extends _i1.SmartFake implements _i6.FriendService {
  _FakeFriendService_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [FriendService].
///
/// See the documentation for Mockito's code generation for more information.
class MockFriendService extends _i1.Mock implements _i6.FriendService {
  @override
  String get baseUrl => (super.noSuchMethod(
        Invocation.getter(#baseUrl),
        returnValue: _i7.dummyValue<String>(
          this,
          Invocation.getter(#baseUrl),
        ),
        returnValueForMissingStub: _i7.dummyValue<String>(
          this,
          Invocation.getter(#baseUrl),
        ),
      ) as String);

  @override
  _i8.Future<List<_i9.User>> getFriends() => (super.noSuchMethod(
        Invocation.method(
          #getFriends,
          [],
        ),
        returnValue: _i8.Future<List<_i9.User>>.value(<_i9.User>[]),
        returnValueForMissingStub:
            _i8.Future<List<_i9.User>>.value(<_i9.User>[]),
      ) as _i8.Future<List<_i9.User>>);

  @override
  _i8.Future<List<_i10.FriendRequest>> getFriendRequests() =>
      (super.noSuchMethod(
        Invocation.method(
          #getFriendRequests,
          [],
        ),
        returnValue:
            _i8.Future<List<_i10.FriendRequest>>.value(<_i10.FriendRequest>[]),
        returnValueForMissingStub:
            _i8.Future<List<_i10.FriendRequest>>.value(<_i10.FriendRequest>[]),
      ) as _i8.Future<List<_i10.FriendRequest>>);

  @override
  _i8.Future<List<_i9.User>> searchUsers(String? query) => (super.noSuchMethod(
        Invocation.method(
          #searchUsers,
          [query],
        ),
        returnValue: _i8.Future<List<_i9.User>>.value(<_i9.User>[]),
        returnValueForMissingStub:
            _i8.Future<List<_i9.User>>.value(<_i9.User>[]),
      ) as _i8.Future<List<_i9.User>>);

  @override
  _i8.Future<String?> sendFriendRequest(String? userId) => (super.noSuchMethod(
        Invocation.method(
          #sendFriendRequest,
          [userId],
        ),
        returnValue: _i8.Future<String?>.value(),
        returnValueForMissingStub: _i8.Future<String?>.value(),
      ) as _i8.Future<String?>);

  @override
  _i8.Future<void> cancelSentRequest(String? requestId) => (super.noSuchMethod(
        Invocation.method(
          #cancelSentRequest,
          [requestId],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> respondToRequest(
    String? requestId,
    bool? accept,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #respondToRequest,
          [
            requestId,
            accept,
          ],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> removeFriend(String? friendId) => (super.noSuchMethod(
        Invocation.method(
          #removeFriend,
          [friendId],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
}

/// A class which mocks [UserViewModel].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserViewModel extends _i1.Mock implements _i11.UserViewModel {
  @override
  _i2.AppDatabase get database => (super.noSuchMethod(
        Invocation.getter(#database),
        returnValue: _FakeAppDatabase_0(
          this,
          Invocation.getter(#database),
        ),
        returnValueForMissingStub: _FakeAppDatabase_0(
          this,
          Invocation.getter(#database),
        ),
      ) as _i2.AppDatabase);

  @override
  _i3.ConnectivityProvider get connectivityProvider => (super.noSuchMethod(
        Invocation.getter(#connectivityProvider),
        returnValue: _FakeConnectivityProvider_1(
          this,
          Invocation.getter(#connectivityProvider),
        ),
        returnValueForMissingStub: _FakeConnectivityProvider_1(
          this,
          Invocation.getter(#connectivityProvider),
        ),
      ) as _i3.ConnectivityProvider);

  @override
  _i4.SocketService get socketService => (super.noSuchMethod(
        Invocation.getter(#socketService),
        returnValue: _FakeSocketService_2(
          this,
          Invocation.getter(#socketService),
        ),
        returnValueForMissingStub: _FakeSocketService_2(
          this,
          Invocation.getter(#socketService),
        ),
      ) as _i4.SocketService);

  @override
  _i5.UserRepository get userRepository => (super.noSuchMethod(
        Invocation.getter(#userRepository),
        returnValue: _FakeUserRepository_3(
          this,
          Invocation.getter(#userRepository),
        ),
        returnValueForMissingStub: _FakeUserRepository_3(
          this,
          Invocation.getter(#userRepository),
        ),
      ) as _i5.UserRepository);

  @override
  _i6.FriendService get friendService => (super.noSuchMethod(
        Invocation.getter(#friendService),
        returnValue: _FakeFriendService_4(
          this,
          Invocation.getter(#friendService),
        ),
        returnValueForMissingStub: _FakeFriendService_4(
          this,
          Invocation.getter(#friendService),
        ),
      ) as _i6.FriendService);

  @override
  List<_i9.User> get friends => (super.noSuchMethod(
        Invocation.getter(#friends),
        returnValue: <_i9.User>[],
        returnValueForMissingStub: <_i9.User>[],
      ) as List<_i9.User>);

  @override
  set sharedUserName(String? _sharedUserName) => super.noSuchMethod(
        Invocation.setter(
          #sharedUserName,
          _sharedUserName,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set sharedUserProfilePic(String? _sharedUserProfilePic) => super.noSuchMethod(
        Invocation.setter(
          #sharedUserProfilePic,
          _sharedUserProfilePic,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set userForTest(_i9.User? value) => super.noSuchMethod(
        Invocation.setter(
          #userForTest,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get isLoading => (super.noSuchMethod(
        Invocation.getter(#isLoading),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool get isLoggingOut => (super.noSuchMethod(
        Invocation.getter(#isLoggingOut),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i8.Future<void> fetchUserData() => (super.noSuchMethod(
        Invocation.method(
          #fetchUserData,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<List<_i9.User>> getFriends() => (super.noSuchMethod(
        Invocation.method(
          #getFriends,
          [],
        ),
        returnValue: _i8.Future<List<_i9.User>>.value(<_i9.User>[]),
        returnValueForMissingStub:
            _i8.Future<List<_i9.User>>.value(<_i9.User>[]),
      ) as _i8.Future<List<_i9.User>>);

  @override
  _i8.Future<void> updateUser({
    required String? firstName,
    required String? lastName,
    String? password,
    _i12.File? profilePicture,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateUser,
          [],
          {
            #firstName: firstName,
            #lastName: lastName,
            #password: password,
            #profilePicture: profilePicture,
          },
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> updateUserPreferences({
    List<String>? allergies,
    Map<String, bool>? dietaryPreferences,
    Map<String, bool>? notificationPreferences,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateUserPreferences,
          [],
          {
            #allergies: allergies,
            #dietaryPreferences: dietaryPreferences,
            #notificationPreferences: notificationPreferences,
          },
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> updateFcmToken(String? token) => (super.noSuchMethod(
        Invocation.method(
          #updateFcmToken,
          [token],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  void listenForFcmTokenRefresh() => super.noSuchMethod(
        Invocation.method(
          #listenForFcmTokenRefresh,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i8.Future<void> deleteUser(_i13.BuildContext? context) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteUser,
          [context],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<_i9.User?> fetchUserProfile(String? userId) => (super.noSuchMethod(
        Invocation.method(
          #fetchUserProfile,
          [userId],
        ),
        returnValue: _i8.Future<_i9.User?>.value(),
        returnValueForMissingStub: _i8.Future<_i9.User?>.value(),
      ) as _i8.Future<_i9.User?>);

  @override
  _i8.Future<void> fetchUserInfo({
    required String? userId,
    required String? currentUserId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchUserInfo,
          [],
          {
            #userId: userId,
            #currentUserId: currentUserId,
          },
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  void listenForUserStatsUpdates(String? userId) => super.noSuchMethod(
        Invocation.method(
          #listenForUserStatsUpdates,
          [userId],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void listenForFriendUpdates(String? userId) => super.noSuchMethod(
        Invocation.method(
          #listenForFriendUpdates,
          [userId],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i8.Future<void> fetchUserStats({String? userId}) => (super.noSuchMethod(
        Invocation.method(
          #fetchUserStats,
          [],
          {#userId: userId},
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> removeFriend(String? friendId) => (super.noSuchMethod(
        Invocation.method(
          #removeFriend,
          [friendId],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  void clear() => super.noSuchMethod(
        Invocation.method(
          #clear,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setLoading(bool? value) => super.noSuchMethod(
        Invocation.method(
          #setLoading,
          [value],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setLoggingOut(bool? value) => super.noSuchMethod(
        Invocation.method(
          #setLoggingOut,
          [value],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setError(String? message) => super.noSuchMethod(
        Invocation.method(
          #setError,
          [message],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void clearError() => super.noSuchMethod(
        Invocation.method(
          #clearError,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addListener(_i14.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i14.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
